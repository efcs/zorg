# -*- python -*-
# ex: set syntax=python:

# Extend paths to allow loading zorg and config modules.
import os, sys
path = os.path.join(os.environ.get('HOME'), 'buildbot-root',  'zorg', 'buildbot', 'osuosl', 'master')
if path not in sys.path:
  sys.path.append(path)
path = os.path.join(os.environ.get('HOME'), 'buildbot-root', 'zorg')
if path not in sys.path:
  sys.path.append(path)

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

import config

# Reload stuff automatically.
#
# FIXME: Find better way.
reload(config.slaves)
reload(config.builders)
reload(config.status)
reload(config)

####### BUILDSLAVES

c['workers'] = config.slaves.get_build_slaves()
c['slavePortnum'] = 9990

####### CHANGESOURCES

import buildbot.schedulers.timed
from buildbot.changes.pb import PBChangeSource
from buildbot.changes.gitpoller import GitPoller

from zorg.buildbot.changes.llvmpoller import LLVMPoller

c['change_source'] = [
  GitPoller(project='libcxx',
            repourl='https://git.llvm.org/git/libcxx.git',
            branches=['master']),
  GitPoller(project='libcxxabi',
            repourl='https://git.llvm.org/git/libcxxabi.git',
            branches=['master'])
]


####### RESOURCE USAGE

# Number of build records to maintain per builder.
c['buildHorizon'] = 200

# Number of logs to maintain per builder.
c['logHorizon'] = 200

# Number of events (connect, disconnect, etc.) to maintain.
#c['eventHorizon'] = 100

# Number of builds to cache in memory.
c['buildCacheSize'] = 200

# Do not compress logs to reduce server load.
# We have a designated build master with large enough HDD.
c['logCompressionLimit'] = False

####### BUILDERS

c['builders'] = builders = list(config.builders.get_builders())

####### STATUS TARGETS

# Schedule builds and email for all non-experimental and non-LNT builders.
# The LNT performance buildbots have a very long delay and commonly fail
# late and if they fail, all of them fail together. As the same failures
# are are normally also catched by the faster non-LNT bots, there is no need
# to warn everybody about failures in the performance bots. Tobias Grosser
# will keep track of such.
standard_builders = [b['name'] for b in builders
                     if not b['category'].endswith('.exp') and
                        not b['category'].endswith('.on-demand') and
                        # List of builders to keep quite
                        not b['name'].startswith('perf-x86_64') and
                        not b['name'] == 'sanitizer_x86_64-freebsd' and
                        not b['name'] == 'clang-native-arm-lnt-perf' and
                        not b['name'] == 'sanitizer_x86_64-freebsd']

# TODO: Fix buildbot.status.words.IRC to accept a list of builders to report
# instead of defining categories to report. Otherwise we could report more
# than requested.
standard_categories = [b['category'] for b in builders
                       if not b['category'].endswith('.exp') and
                          not b['category'].endswith('.on-demand') and
                          not b['name'].startswith('perf-x86_64')]

c['www'] = config.status.get_status_targets(standard_builders,
                                               standard_categories)

####### SCHEDULERS

from buildbot.scheduler import Scheduler
from buildbot.schedulers import triggerable
from buildbot.schedulers.filter import ChangeFilter
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler

def depends_on(projects):
    """
    Returns a ChangeFilter for the given projects.
    """
    return ChangeFilter(project=projects)

def get_standard_for(category):
    """
    Returns a list of standard builder names for the given category.
    """
    return [
        b['name'] for b in builders
                  if b['category'] == category]

def get_all_for_libcxx(builder_cat):
    return [
        b['name'] for b in builders 
                  if b['category'] == builder_cat]


def get_all_for(category):
    """
    Returns a list of builder names for the given category, including
    expiremental builders.
    """
    return [
        b['name'] for b in builders
            if b['category'] == category or b['category'] == category + '.exp']


c['schedulers'] = []
c['schedulers'].append(buildbot.schedulers.timed.Nightly(
    name            = 'libcxx_nightly_scheduler',
    builderNames    = get_all_for_libcxx('libcxx-nightly'),
    hour            = range(0, 24),
    branch          = None,
    change_filter   = depends_on(['libcxx', 'libcxxabi']),
    onlyIfChanged   = False))

c['schedulers'].append(ForceScheduler(
    name            = 'libcxx_force_scheduler',
    builderNames    = get_all_for_libcxx('libcxx-nightly')))

####### PROJECT IDENTITY

c['title'] = "Erics LLVM"
c['titleURL'] = "efcs.ca"
c['buildbotURL'] = "http://home.efcs.ca:8010/" # "http://ds2.efcs.ca:8080/"

####### DB URL

#c['db_url'] = "postgresql://localhost/buildmasterdb"
c['db_url'] = "sqlite:///state.sqlite"
